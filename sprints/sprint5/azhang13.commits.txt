util.js      (alex zhang on 04/29/2023 at 16:33): 
util.js      (alex zhang on 04/29/2023 at 16:33): let timer_interval_id = 0;
util.js      (alex zhang on 04/29/2023 at 16:33): const timer_update_frequency = 25;  // in milliseconds
util.js      (alex zhang on 04/29/2023 at 16:33): 
util.js      (alex zhang on 04/29/2023 at 16:33): function start_timer(end_time) {
util.js      (alex zhang on 04/29/2023 at 16:33):     if (!Number.isNaN(end_time) && end_time != null) {
util.js      (alex zhang on 04/29/2023 at 16:33):         timer_interval_id = setInterval(update_timer, timer_update_frequency, end_time);
util.js      (alex zhang on 04/29/2023 at 16:33):     } else {
util.js      (alex zhang on 04/29/2023 at 21:23):         question_timer_tag.innerText = "Untimed";
util.js      (alex zhang on 04/29/2023 at 16:33):     }
util.js      (alex zhang on 04/29/2023 at 16:33): }
util.js      (alex zhang on 04/29/2023 at 16:33): 
util.js      (alex zhang on 04/29/2023 at 16:33): function update_timer(end_time) {
util.js      (alex zhang on 04/29/2023 at 21:23):     question_timer_tag.innerText = end_time - Date.now() > 0 ? ms_to_formatted_string(end_time - Date.now()) : "00:00.000";
util.js      (alex zhang on 04/29/2023 at 21:23): }
util.js      (alex zhang on 04/29/2023 at 21:23): 
util.js      (alex zhang on 04/29/2023 at 21:23): function stop_timer() {
util.js      (alex zhang on 04/29/2023 at 21:23):     clearInterval(timer_interval_id);
util.js      (alex zhang on 04/29/2023 at 21:23): 
util.js      (alex zhang on 04/29/2023 at 21:23):     if (question_timer_tag.innerText != "Untimed") {
util.js      (alex zhang on 04/29/2023 at 21:23):         question_timer_tag.innerText = "00:00.000";
util.js      (alex zhang on 04/29/2023 at 21:23):     }
util.js      (alex zhang on 04/29/2023 at 16:33): }
bigScreen.css (alex zhang on 04/29/2023 at 22:29): #player-list {
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     color: #FFFFFF;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     display: grid;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     grid-template-columns: repeat(3, 1fr);
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     grid-gap: 10px;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     padding: 10px;
bigScreen.css (alex zhang on 04/29/2023 at 22:29): }
bigScreen.css (alex zhang on 04/29/2023 at 22:29): 
bigScreen.css (alex zhang on 04/29/2023 at 22:29): #player-list div {
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     background: linear-gradient(to left, #23a6d5, #1e87ae, #1e89a9, #16738a);
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     border-radius: 3px;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     padding: 20px;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     font-size: 16px;
bigScreen.css (alex zhang on 04/29/2023 at 22:29):     text-align: center;
bigScreen.css (alex zhang on 04/29/2023 at 22:29): }
bigScreen.css (alex zhang on 04/29/2023 at 22:29): 
bigScreen.css (alex zhang on 04/29/2023 at 17:15): 
bigScreen.css (alex zhang on 04/29/2023 at 17:15): .info-text {
bigScreen.css (alex zhang on 04/29/2023 at 17:15): 
summary.js   (alex zhang on 04/29/2023 at 21:50): 
summary.js   (alex zhang on 04/29/2023 at 21:50):   newRow.setAttribute("class", correctAnswer == studentAnswer ? "correct" : "incorrect");
summary.js   (alex zhang on 04/29/2023 at 16:46):   // let showQuestions = true; // boolean variable to determine whether to show the question or result area
summary.js   (alex zhang on 04/29/2023 at 16:46):   if (showQuestions) {
summary.js   (alex zhang on 04/29/2023 at 16:46):   } else {
summary.js   (alex zhang on 04/29/2023 at 16:46):   }
summary.js   (alex zhang on 04/29/2023 at 16:46): }
summary.js   (alex zhang on 04/29/2023 at 16:46): 
summary.js   (alex zhang on 04/29/2023 at 16:46): toggle_visibility(true);
quiz.js      (alex zhang on 04/29/2023 at 21:50): const results_score_tag = document.getElementById("results-score");
quiz.js      (alex zhang on 04/29/2023 at 16:46): let curr_prompt = "";
quiz.js      (alex zhang on 04/29/2023 at 16:46):     curr_prompt = prompt;
quiz.js      (alex zhang on 04/29/2023 at 16:46):     curr_prompt = prompt;
quiz.js      (alex zhang on 04/29/2023 at 16:46):     curr_prompt = prompt;
quiz.js      (alex zhang on 04/29/2023 at 21:23):     stop_timer();
quiz.js      (alex zhang on 04/29/2023 at 21:50):     results_score_tag.innerText = `Final score: ${score_tag.innerText}`;
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 16:46):     // Add row to the summary table
quiz.js      (alex zhang on 04/29/2023 at 16:46):     addTableRow(curr_prompt, correct_answer, player_answer);
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 21:50):     question_feedback_tag.innerText = `Incorrect.You answered "${player_answer}". Correct answer is "${correct_answer}"`;
quiz.js      (alex zhang on 04/29/2023 at 21:50):     score_tag.innerText = `${num_right} /${num_right + num_wrong}`;
quiz.js      (alex zhang on 04/29/2023 at 21:50):     results_score_tag.innerText = `Final score: ${score_tag.innerText}`;
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 16:46):     // Add row to the summary table
quiz.js      (alex zhang on 04/29/2023 at 16:46):     addTableRow(curr_prompt, correct_answer, player_answer);
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 17:22): socket.on("run timeout", function () {
quiz.js      (alex zhang on 04/29/2023 at 17:22):     output_tag.innerText = "Your code exceeded the standard time.";
quiz.js      (alex zhang on 04/29/2023 at 17:22): });
quiz.js      (alex zhang on 04/29/2023 at 17:22): 
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 16:46): /*----------------------------------------------------------------------------*/
quiz.js      (alex zhang on 04/29/2023 at 16:46): /* Show Summary When Session Closes                                           */
quiz.js      (alex zhang on 04/29/2023 at 16:46): /*----------------------------------------------------------------------------*/
quiz.js      (alex zhang on 04/29/2023 at 16:46): 
quiz.js      (alex zhang on 04/29/2023 at 16:46): socket.on("close session", function () {
quiz.js      (alex zhang on 04/29/2023 at 16:46):     toggle_visibility(false);
quiz.js      (alex zhang on 04/29/2023 at 16:46): });
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <title>Big Screen</title>
bigScreen.html (alex zhang on 04/29/2023 at 17:15):                     <div class="info-text" id="session-id">Session ID </div>
bigScreen.html (alex zhang on 04/29/2023 at 17:15):                     <div class="info-text" id="num-players">0 connected</div>
bigScreen.html (alex zhang on 04/29/2023 at 17:15):                     <div class="separator"></div>
bigScreen.html (alex zhang on 04/29/2023 at 17:15):                     <div class="info-text" id="question-timer">00:00:00</div>
bigScreen.html (alex zhang on 04/29/2023 at 16:33):             <h1 id="question">Waiting for host...</h1>
bigScreen.html (alex zhang on 04/29/2023 at 23:52):             <h1 id="answer-count"></h1>
bigScreen.html (alex zhang on 04/29/2023 at 16:33):             <h1 id="answer"></h1>
bigScreen.html (alex zhang on 04/29/2023 at 22:29):     <div id="player-list">
bigScreen.html (alex zhang on 04/29/2023 at 22:29):     </div>
bigScreen.html (alex zhang on 04/29/2023 at 22:29): 
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <div id="chart-container" class="modern-container">
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <!-- JavaScript to communicate with server -->
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <script src="/socket.io/socket.io.js"></script>
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <script src="js/util.js"></script>
bigScreen.html (alex zhang on 04/29/2023 at 16:33):     <script src="js/bigScreen.js"></script>
bigScreen.js (alex zhang on 04/29/2023 at 16:33): // NOTE: util.js is loaded before this file. This file uses functions defined in util.js
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /* Constants                                                                  */
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const socket = io();
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const session_id_tag = document.getElementById("session-id");
bigScreen.js (alex zhang on 04/29/2023 at 17:15): const num_players_tag = document.getElementById("num-players");
bigScreen.js (alex zhang on 04/29/2023 at 23:52): const answer_count_tag = document.getElementById("answer-count");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const question_timer_tag = document.getElementById("question-timer");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const question_tag = document.getElementById("question");
bigScreen.js (alex zhang on 04/29/2023 at 22:29): const player_list_tag = document.getElementById("player-list");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const answer_tag = document.getElementById("answer");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const chart_container_tag = document.getElementById("chart-container");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const chart_tag = document.getElementById("myChart");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): chart_container_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 23:52): answer_count_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 23:52): 
bigScreen.js (alex zhang on 04/29/2023 at 23:52): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 23:52): /* Global Variables                                                           */
bigScreen.js (alex zhang on 04/29/2023 at 23:52): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 23:52): let num_players = 0;
bigScreen.js (alex zhang on 04/29/2023 at 23:52): let num_players_answered = 0;
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 22:44): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 22:44): /* Functions                                                                  */
bigScreen.js (alex zhang on 04/29/2023 at 22:44): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 22:44): 
bigScreen.js (alex zhang on 04/29/2023 at 23:52): function update_answer_count_tag() {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     answer_count_tag.innerText = `${num_players_answered} / ${num_players}`;
bigScreen.js (alex zhang on 04/29/2023 at 23:52): }
bigScreen.js (alex zhang on 04/29/2023 at 23:52): 
bigScreen.js (alex zhang on 04/29/2023 at 22:44): function append_player_list(nickname) {
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     const player_tag = document.createElement("div");
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     player_tag.innerText = nickname;
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     player_tag.setAttribute("id", nickname);
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     player_list_tag.prepend(player_tag);
bigScreen.js (alex zhang on 04/29/2023 at 22:44): }
bigScreen.js (alex zhang on 04/29/2023 at 22:44): 
bigScreen.js (alex zhang on 04/29/2023 at 22:44): function remove_player_list(nickname) {
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     const player_tag = document.getElementById(nickname);
bigScreen.js (alex zhang on 04/29/2023 at 22:44): 
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     if (player_tag != null) {
bigScreen.js (alex zhang on 04/29/2023 at 22:44):         player_tag.remove();
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     }
bigScreen.js (alex zhang on 04/29/2023 at 22:44): }
bigScreen.js (alex zhang on 04/29/2023 at 22:44): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /* Room Joining                                                               */
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const params = new URLSearchParams(window.location.search);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const roomid_param = params.get("roomid");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): if (roomid_param == null || roomid_param == "") {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     error_message("Enter a room id");
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     window.location.href = 'teacherPage.html';
bigScreen.js (alex zhang on 04/29/2023 at 16:33): }
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.emit("spectate room", roomid_param);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 23:52): socket.on("spectate room success", function (msg, _num_players, nicknames) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players = _num_players
bigScreen.js (alex zhang on 04/29/2023 at 23:52): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     session_id_tag.innerText = `Session ID: ${roomid_param}`;
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     num_players_tag.innerText = `${num_players} players`;
bigScreen.js (alex zhang on 04/29/2023 at 22:58): 
bigScreen.js (alex zhang on 04/29/2023 at 22:58):     console.log(nicknames);
bigScreen.js (alex zhang on 04/29/2023 at 22:58): 
bigScreen.js (alex zhang on 04/29/2023 at 22:58):     for (const nickname of nicknames) {
bigScreen.js (alex zhang on 04/29/2023 at 22:58):         console.log(nickname);
bigScreen.js (alex zhang on 04/29/2023 at 22:58):         append_player_list(nickname);
bigScreen.js (alex zhang on 04/29/2023 at 22:58):     }
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("spectate room fail", function (msg) {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     error_message(msg);
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     window.location.href = 'teacherPage.html';
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 17:15): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 17:15): /* Update Player Count                                                        */
bigScreen.js (alex zhang on 04/29/2023 at 17:15): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 23:52): socket.on("num players", function (_num_players) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players = _num_players;
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     num_players_tag.innerText = `${num_players} players`;
bigScreen.js (alex zhang on 04/29/2023 at 17:15): });
bigScreen.js (alex zhang on 04/29/2023 at 17:15): 
bigScreen.js (alex zhang on 04/29/2023 at 22:29): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 22:29): /* Initial Player List                                                        */
bigScreen.js (alex zhang on 04/29/2023 at 22:29): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 22:29): // This player list is only visible before the host pushes any questions, similar to Kahoot
bigScreen.js (alex zhang on 04/29/2023 at 22:29): socket.on("player join", function (socket_id, nickname) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     ++num_players;
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     append_player_list(nickname);
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 22:44): });
bigScreen.js (alex zhang on 04/29/2023 at 22:29): 
bigScreen.js (alex zhang on 04/29/2023 at 22:44): socket.on("player leave", function (socket_id, nickname) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     --num_players;
bigScreen.js (alex zhang on 04/29/2023 at 22:44):     remove_player_list(nickname);
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 22:29): });
bigScreen.js (alex zhang on 04/29/2023 at 22:29): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /* Handle Questions                                                           */
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("push frquestion", function (prompt, end_time) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players_answered = 0;
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     answer_count_tag.style.display = "block";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     player_list_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     question_tag.innerText = `Question: ${prompt}`;
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     answer_tag.innerText = "";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     chart_container_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     start_timer(end_time);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("push mcquestion", function (prompt, answer_choices, end_time) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players_answered = 0;
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     answer_count_tag.style.display = "block";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     player_list_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     question_tag.innerText = `Question: ${prompt}`;
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     answer_tag.innerText = "";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     chart_container_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     start_timer(end_time);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("push codequestion", function (prompt, template, provided_language, end_time) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players_answered = 0;
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     answer_count_tag.style.display = "block";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     player_list_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     question_tag.innerText = `Question: ${prompt}`;
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     answer_tag.innerText = "";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     chart_container_tag.style.display = "none";
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     start_timer(end_time);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("correct answer", function (answer) {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     answer_tag.innerText = `Answer: ${answer}`;
bigScreen.js (alex zhang on 04/29/2023 at 16:33): })
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("close question success", function () {
bigScreen.js (alex zhang on 04/29/2023 at 21:23):     stop_timer();
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 23:52): //
bigScreen.js (alex zhang on 04/29/2023 at 23:52): 
bigScreen.js (alex zhang on 04/29/2023 at 23:52): socket.on("new answer", function (_num_players_answered) {
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     num_players_answered = _num_players_answered;
bigScreen.js (alex zhang on 04/29/2023 at 23:52):     update_answer_count_tag();
bigScreen.js (alex zhang on 04/29/2023 at 23:52): });
bigScreen.js (alex zhang on 04/29/2023 at 23:52): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /* Bar Chart                                                                  */
bigScreen.js (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const labels = ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'];
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const values = [12, 19, 3, 5, 2, 3];
bigScreen.js (alex zhang on 04/29/2023 at 16:33): let data = {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     labels: labels,
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     datasets: [{
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         label: 'Number of answers',
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         data: values,
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         borderWidth: 1
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     }]
bigScreen.js (alex zhang on 04/29/2023 at 16:33): };
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const config = {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     type: 'bar',
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     data: data,
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     options: {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         scales: {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):             y: {
bigScreen.js (alex zhang on 04/29/2023 at 22:29):                 beginAtZero: true,
bigScreen.js (alex zhang on 04/29/2023 at 22:29):                 ticks: {
bigScreen.js (alex zhang on 04/29/2023 at 22:29):                     stepSize: 1
bigScreen.js (alex zhang on 04/29/2023 at 22:29):                 }
bigScreen.js (alex zhang on 04/29/2023 at 16:33):             }
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         }
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     },
bigScreen.js (alex zhang on 04/29/2023 at 16:33): };
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const ctx = chart_tag.getContext('2d');
bigScreen.js (alex zhang on 04/29/2023 at 16:33): const myBarChart = new Chart(ctx, config);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33): socket.on("question results", function (results) {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     console.log(results);
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     let new_labels = [];
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     let new_values = [];
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     for (const [answer, frequency] of Object.entries(results)) {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         if (frequency == null) {
bigScreen.js (alex zhang on 04/29/2023 at 16:33):             continue;
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         }
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         new_labels.push(answer);
bigScreen.js (alex zhang on 04/29/2023 at 16:33):         new_values.push(frequency);
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     }
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     data.labels = new_labels;
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     data.datasets[0].data = new_values;
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     chart_container_tag.style.display = "block";
bigScreen.js (alex zhang on 04/29/2023 at 16:33): 
bigScreen.js (alex zhang on 04/29/2023 at 22:29):     myBarChart.update();
bigScreen.js (alex zhang on 04/29/2023 at 22:29): 
bigScreen.js (alex zhang on 04/29/2023 at 22:29): 
bigScreen.js (alex zhang on 04/29/2023 at 16:33):     console.log("Got results!");
bigScreen.js (alex zhang on 04/29/2023 at 16:33): });
server.ts    (alex zhang on 04/29/2023 at 16:46): import { QuestionType, CodeLanguage, Question, FRQuestion, MCQuestion, CodeQuestion, string_to_codelanguage, codelanguage_to_string } from "./question.js";
server.ts    (alex zhang on 04/29/2023 at 16:33):     let results = new Object();
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         let player_answer: any = quizroom.get_player_curr_answer(player);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         let answer_string: string;
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         switch (quizroom.curr_question.type) {
server.ts    (alex zhang on 04/29/2023 at 16:33):             case QuestionType.free_response:
server.ts    (alex zhang on 04/29/2023 at 16:33):                 answer_string = player_answer;
server.ts    (alex zhang on 04/29/2023 at 16:33):                 break;
server.ts    (alex zhang on 04/29/2023 at 16:33):             case QuestionType.multiple_choice:
server.ts    (alex zhang on 04/29/2023 at 16:33):                 answer_string = (quizroom.curr_question as MCQuestion).answer_choices[player_answer];
server.ts    (alex zhang on 04/29/2023 at 16:33):                 break;
server.ts    (alex zhang on 04/29/2023 at 16:33):             case QuestionType.code:
server.ts    (alex zhang on 04/29/2023 at 16:33):                 answer_string = player.curr_output.stdout;
server.ts    (alex zhang on 04/29/2023 at 16:33):                 break;
server.ts    (alex zhang on 04/29/2023 at 16:33):         }
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         console.log(answer_string);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         if (results[answer_string] == null) {
server.ts    (alex zhang on 04/29/2023 at 16:33):             results[answer_string] = 1;
server.ts    (alex zhang on 04/29/2023 at 16:33):         } else {
server.ts    (alex zhang on 04/29/2023 at 16:33):             ++results[answer_string];
server.ts    (alex zhang on 04/29/2023 at 16:33):         }
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         if (player.is_correct[quizroom.curr_question_index]) {
server.ts    (alex zhang on 04/29/2023 at 16:46):             io.to(player.socket.id).emit("answer correct", answer_string, quizroom.curr_question.answer, player.num_right, player.num_wrong);
server.ts    (alex zhang on 04/29/2023 at 16:46):             io.to(player.socket.id).emit("answer incorrect", answer_string, quizroom.curr_question.answer, player.num_right, player.num_wrong);
server.ts    (alex zhang on 04/29/2023 at 16:33):     console.log(results);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):     io.to(`${quizroom.id} spectators`).emit("correct answer", quizroom.curr_question.answer);
server.ts    (alex zhang on 04/29/2023 at 16:33):     io.to(`${quizroom.id} spectators`).emit("question results", results);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):     let is_spectator: boolean = false;
server.ts    (alex zhang on 04/29/2023 at 16:33):                 case QuestionType.code:
server.ts    (alex zhang on 04/29/2023 at 16:33):                     io.to(this_quizroom.id).emit("push codequestion", this_quizroom.curr_question.prompt, (this_quizroom.curr_question as CodeQuestion).template, codelanguage_to_string((this_quizroom.curr_question as CodeQuestion).language), this_quizroom.curr_question.end_time);
server.ts    (alex zhang on 04/29/2023 at 16:33):                     break;
server.ts    (alex zhang on 04/29/2023 at 17:15): 
server.ts    (alex zhang on 04/29/2023 at 17:15):         io.to(`${this_quizroom.id} spectators`).emit("num players", this_quizroom.num_players);
server.ts    (alex zhang on 04/29/2023 at 16:33):     socket.on("spectate room", function (room_id: string) {
server.ts    (alex zhang on 04/29/2023 at 16:33):         if (quizrooms[room_id] == null) {
server.ts    (alex zhang on 04/29/2023 at 16:33):             io.to(socket.id).emit("spectate room fail", `room ${room_id} does not exist`);
server.ts    (alex zhang on 04/29/2023 at 16:33):             return;
server.ts    (alex zhang on 04/29/2023 at 16:33):         }
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):         console.log(`${socket.id} is a spectator!`);
server.ts    (alex zhang on 04/29/2023 at 16:33):         is_spectator = true;
server.ts    (alex zhang on 04/29/2023 at 16:33):         this_quizroom = quizrooms[room_id];
server.ts    (alex zhang on 04/29/2023 at 16:33):         socket.join(room_id);
server.ts    (alex zhang on 04/29/2023 at 16:33):         socket.join(`${room_id} spectators`);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 22:58):         io.to(socket.id).emit("spectate room success", "successfully spectating room", this_quizroom.num_players, this_quizroom.nicknames);
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 16:33):     });
server.ts    (alex zhang on 04/29/2023 at 16:33): 
server.ts    (alex zhang on 04/29/2023 at 17:22):             case RunResult.run_timeout:
server.ts    (alex zhang on 04/29/2023 at 17:22):                 io.to(socket.id).emit("run timeout");
server.ts    (alex zhang on 04/29/2023 at 17:22):                 break;
server.ts    (alex zhang on 04/29/2023 at 23:52):         console.log(this_quizroom.get_player_curr_answer(this_player));
server.ts    (alex zhang on 04/29/2023 at 23:52): 
server.ts    (alex zhang on 04/29/2023 at 23:52):         if (this_quizroom.get_player_curr_answer(this_player) == undefined) {
server.ts    (alex zhang on 04/29/2023 at 23:52):             this_quizroom.curr_question.increment_num_answered();
server.ts    (alex zhang on 04/29/2023 at 23:52):             io.to(`${this_quizroom.id} spectators`).emit("new answer", this_quizroom.curr_question.num_answered);
server.ts    (alex zhang on 04/29/2023 at 23:52):         }
server.ts    (alex zhang on 04/29/2023 at 23:52): 
server.ts    (alex zhang on 04/29/2023 at 16:46):             io.to(this_quizroom.id).emit("close session");
server.ts    (alex zhang on 04/29/2023 at 22:44):             io.to(this_quizroom.id).emit("player leave", socket.id, this_player.nickname);
server.ts    (alex zhang on 04/29/2023 at 17:15):             io.to(`${this_quizroom.id} spectators`).emit("num players", this_quizroom.num_players);
player.ts    (alex zhang on 04/29/2023 at 16:33): import { RunOutput } from "./runcode.js"
player.ts    (alex zhang on 04/29/2023 at 16:33):     public curr_output: RunOutput;
player.ts    (alex zhang on 04/29/2023 at 16:33):         this.curr_output = new RunOutput;
player.ts    (alex zhang on 04/29/2023 at 16:33): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area h1,
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area h3 {
summary.css  (alex zhang on 04/29/2023 at 21:50): 	color: #fff;
summary.css  (alex zhang on 04/29/2023 at 21:50): }
summary.css  (alex zhang on 04/29/2023 at 21:50): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area table {
summary.css  (alex zhang on 04/29/2023 at 21:50): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area th,
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area td {
summary.css  (alex zhang on 04/29/2023 at 21:50): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area th {
summary.css  (alex zhang on 04/29/2023 at 21:50): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area .correct {
summary.css  (alex zhang on 04/29/2023 at 21:50): 	background-color: green;
summary.css  (alex zhang on 04/29/2023 at 21:50): }
summary.css  (alex zhang on 04/29/2023 at 21:50): 
summary.css  (alex zhang on 04/29/2023 at 21:50): #results-area .incorrect {
summary.css  (alex zhang on 04/29/2023 at 21:50): 	background-color: red;
summary.css  (alex zhang on 04/29/2023 at 21:50): }
host.js      (alex zhang on 04/29/2023 at 16:33): let room_id = "";
host.js      (alex zhang on 04/29/2023 at 16:33):     room_id = room_input.value;
host.js      (alex zhang on 04/29/2023 at 16:33):     console.log("create room " + room_id);
host.js      (alex zhang on 04/29/2023 at 16:33):     socket.emit("create room", room_id);
host.js      (alex zhang on 04/29/2023 at 16:33):     start_timer(end_time);
host.js      (alex zhang on 04/29/2023 at 21:23):     stop_timer();
host.js      (alex zhang on 04/29/2023 at 16:33): 
host.js      (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
host.js      (alex zhang on 04/29/2023 at 16:33): /* Big Screen Page                                                            */
host.js      (alex zhang on 04/29/2023 at 16:33): /*----------------------------------------------------------------------------*/
host.js      (alex zhang on 04/29/2023 at 16:33): document.getElementById("display-button").addEventListener("click", function (e) {
host.js      (alex zhang on 04/29/2023 at 16:33):     e.preventDefault();
host.js      (alex zhang on 04/29/2023 at 16:33): 
host.js      (alex zhang on 04/29/2023 at 16:33):     if (room_id == null || room_id == "") {
host.js      (alex zhang on 04/29/2023 at 16:33):         error_message("Please create a room first.");
host.js      (alex zhang on 04/29/2023 at 16:33):         return;
host.js      (alex zhang on 04/29/2023 at 16:33):     }
host.js      (alex zhang on 04/29/2023 at 16:33): 
host.js      (alex zhang on 04/29/2023 at 16:33):     let params = new URLSearchParams();
host.js      (alex zhang on 04/29/2023 at 16:33):     params.append('roomid', room_id);
host.js      (alex zhang on 04/29/2023 at 16:33): 
host.js      (alex zhang on 04/29/2023 at 16:33):     const url = 'bigScreen.html?' + params.toString();
host.js      (alex zhang on 04/29/2023 at 16:33):     window.open(url, "_blank");
host.js      (alex zhang on 04/29/2023 at 16:33): });
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):     public get nicknames(): string[] {
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):         let nicknames: string[] = [];
quizroom.ts  (alex zhang on 04/29/2023 at 22:58): 
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):         for (const [key, player] of Object.entries(this._players)) {
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):             nicknames.push(player.nickname);
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):         }
quizroom.ts  (alex zhang on 04/29/2023 at 22:58): 
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):         return nicknames;
quizroom.ts  (alex zhang on 04/29/2023 at 22:58):     }
quizroom.ts  (alex zhang on 04/29/2023 at 22:58): 
quizroom.ts  (alex zhang on 04/29/2023 at 17:15):         --this._num_players;
quizroom.ts  (alex zhang on 04/29/2023 at 23:52):     public get_player_curr_answer(player: Player): string | undefined {
quizroom.ts  (alex zhang on 04/29/2023 at 23:52):         return player.answers[this.curr_question_index];
quizroom.ts  (alex zhang on 04/29/2023 at 16:33):     public set_player_curr_answer(player: Player, answer: any): void {
quizroom.ts  (alex zhang on 04/29/2023 at 23:52):         player.answers[this.curr_question_index] = answer;
quizroom.ts  (alex zhang on 04/29/2023 at 23:52):         console.log(`setting player.answers[${this.curr_question_index}] = ${answer}`);
quizroom.ts  (alex zhang on 04/29/2023 at 16:33):             const grade: number = await this.curr_question.check_answer(this.get_player_curr_answer(player), player);
quizPage.html (alex zhang on 04/29/2023 at 16:46): 
quizPage.html (alex zhang on 04/29/2023 at 16:46): 
quizPage.html (alex zhang on 04/29/2023 at 21:50):         <h3 id="results-score">Score:</h3>
quizPage.html (alex zhang on 04/29/2023 at 16:46):     <!-- JavaScript for quiz summary -->
quizPage.html (alex zhang on 04/29/2023 at 16:46):     <script src="summary.js"></script>
quizPage.html (alex zhang on 04/29/2023 at 16:46): 
question.ts  (alex zhang on 04/29/2023 at 16:33): import { Player } from "./player.js"
question.ts  (alex zhang on 04/29/2023 at 16:46): function string_to_codelanguage(str: string): CodeLanguage | null {
question.ts  (alex zhang on 04/29/2023 at 16:46):     switch (str) {
question.ts  (alex zhang on 04/29/2023 at 16:46):         case "C":
question.ts  (alex zhang on 04/29/2023 at 16:46):             return CodeLanguage.C;
question.ts  (alex zhang on 04/29/2023 at 16:46):         default:
question.ts  (alex zhang on 04/29/2023 at 16:46):             return null;
question.ts  (alex zhang on 04/29/2023 at 16:46):     }
question.ts  (alex zhang on 04/29/2023 at 16:46): }
question.ts  (alex zhang on 04/29/2023 at 16:46): 
question.ts  (alex zhang on 04/29/2023 at 16:46): function codelanguage_to_string(language: CodeLanguage): string {
question.ts  (alex zhang on 04/29/2023 at 16:46):     switch (language) {
question.ts  (alex zhang on 04/29/2023 at 16:46):         case CodeLanguage.JavaScript:
question.ts  (alex zhang on 04/29/2023 at 16:46):             return "JavaScript";
question.ts  (alex zhang on 04/29/2023 at 16:46):         case CodeLanguage.C:
question.ts  (alex zhang on 04/29/2023 at 16:46):             return "C";
question.ts  (alex zhang on 04/29/2023 at 16:46):         default:
question.ts  (alex zhang on 04/29/2023 at 16:46):             return "";
question.ts  (alex zhang on 04/29/2023 at 16:46):     }
question.ts  (alex zhang on 04/29/2023 at 16:46): }
question.ts  (alex zhang on 04/29/2023 at 16:46): 
question.ts  (alex zhang on 04/29/2023 at 16:46): 
question.ts  (alex zhang on 04/29/2023 at 23:52):     protected _num_answered: number;      // How many players answered the question
question.ts  (alex zhang on 04/29/2023 at 23:52):         this._num_answered = 0;
question.ts  (alex zhang on 04/29/2023 at 23:52):     public get num_answered(): number {
question.ts  (alex zhang on 04/29/2023 at 23:52):         return this._num_answered;
question.ts  (alex zhang on 04/29/2023 at 23:52):     }
question.ts  (alex zhang on 04/29/2023 at 23:52): 
question.ts  (alex zhang on 04/29/2023 at 16:33):     public async check_answer(provided_answer: any, player: Player): Promise<number> {
question.ts  (alex zhang on 04/29/2023 at 23:52):     public increment_num_answered(): void {
question.ts  (alex zhang on 04/29/2023 at 23:52):         ++this._num_answered;
question.ts  (alex zhang on 04/29/2023 at 23:52):     }
question.ts  (alex zhang on 04/29/2023 at 23:52): 
question.ts  (alex zhang on 04/29/2023 at 16:33):     public override async check_answer(provided_answer: string, player: Player): Promise<number> {
question.ts  (alex zhang on 04/29/2023 at 16:33):     public override async check_answer(provided_answer_indices: number[], player: Player): Promise<number> {
question.ts  (alex zhang on 04/29/2023 at 16:33):     private _template: string;
question.ts  (alex zhang on 04/29/2023 at 16:46):         super(`${prompt} (language: ${codelanguage_to_string(language)})`, answer, time_limit);
question.ts  (alex zhang on 04/29/2023 at 16:33):         this._template = template;
question.ts  (alex zhang on 04/29/2023 at 16:33):     public get template(): string {
question.ts  (alex zhang on 04/29/2023 at 16:33):         return this._template;
question.ts  (alex zhang on 04/29/2023 at 16:33):     }
question.ts  (alex zhang on 04/29/2023 at 16:33): 
question.ts  (alex zhang on 04/29/2023 at 16:33):     public get language(): CodeLanguage {
question.ts  (alex zhang on 04/29/2023 at 16:33):         return this._language;
question.ts  (alex zhang on 04/29/2023 at 16:33):     }
question.ts  (alex zhang on 04/29/2023 at 16:33):     public override async check_answer(provided_answer: string, player: Player): Promise<number> {
question.ts  (alex zhang on 04/29/2023 at 16:33):         player.curr_output = output;
question.ts  (alex zhang on 04/29/2023 at 16:33): 
question.ts  (alex zhang on 04/29/2023 at 16:46): export { string_to_codelanguage };
question.ts  (alex zhang on 04/29/2023 at 16:46): export { codelanguage_to_string };
teacherPage.html (alex zhang on 04/29/2023 at 17:38):     <title>Teacher Page</title>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):             <a class="home-btn" href="index.html"
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                 onclick="return confirm('Are you sure you want to close the session?');"><button type="button"
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                     class="side-btn">Home</button></a>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):             <a class="display-btn" href="#"><button type="button" id="display-button"
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                     class="side-btn">Display</button></a>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                             <input type="text" id="room-input" class="sesh-input" name="session-id"
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                                 placeholder="Session ID">
teacherPage.html (alex zhang on 04/29/2023 at 21:23):                         <input type="number" id="timer-input" class="time-input" name="time"
teacherPage.html (alex zhang on 04/29/2023 at 21:23):                             placeholder="Time in seconds">
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                         <a href="index.html" onclick="return confirm('Are you sure you want to close the session?');">
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                             <button type="button" class="close-btn press-down" style="background-color: red;">Close
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                                 Session</button>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):                         </a>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="/socket.io/socket.io.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/util.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/host.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/teacherPage.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <!-- JS for code editor -->
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/ace-builds/src/ace.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/ace-builds/theme-monokai.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="js/ide.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
teacherPage.html (alex zhang on 04/29/2023 at 16:33):         <script>update_question_type();</script>
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33):         timer: '00:00:00',
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33):                 label: 'Number of students',
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): // async function makeChart(given_question, session_id, time, labels, main_label, data, width) {
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //     return {
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //         question: given_question, // given_question must be a string
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //         sessionId: session_id,  // session_id must be a string
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //         timer: time,  // time must be a string
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //         barData: {
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //             labels: labels, // labels must be an array of strings
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //             datasets: [{
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //                 label: main_label, // main_label must be a string
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //                 data: data, // data must be an array of the info
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //                 borderWidth: width // width must be an int
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //             }]
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //         }
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): //     };
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): // }
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33): var d = [25, 10, 15];
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33):     const data = await fetchDataFromBackend();
bigScreen_old.js (alex zhang on 04/29/2023 at 16:33):     // const data = await makeChart(q, s, t, l, m, d, w);
runcode.ts   (alex zhang on 04/29/2023 at 17:22): const code_time_limit: number = 2500; // in milliseconds
runcode.ts   (alex zhang on 04/29/2023 at 17:22): 
runcode.ts   (alex zhang on 04/29/2023 at 17:22):     run_success,
runcode.ts   (alex zhang on 04/29/2023 at 17:22):     run_timeout
runcode.ts   (alex zhang on 04/29/2023 at 17:22):             exec(`./${executable_name}`, { timeout: code_time_limit }, (err, stdout, stderr) => {
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                     if (err.killed && err.signal === "SIGTERM") {
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                         output.result = RunResult.run_timeout;
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                     } else {
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                         output.stdout = stdout;
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                         output.stderr = stderr;
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                         output.result = RunResult.run_fail;
runcode.ts   (alex zhang on 04/29/2023 at 17:22):                     }
runcode.ts   (alex zhang on 04/29/2023 at 17:22):         console.error("Error during compilation or execution:", error);
